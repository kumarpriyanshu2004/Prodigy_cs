# -*- coding: utf-8 -*-
"""prodigy_CS_02ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1abR-XHPMkOW3-u_iXJHMolDunk2P6Lox
"""

pip install pillow

from PIL import Image

def encrypt_image(image_path, output_path, key):
    image = Image.open(image_path)
    pixels = list(image.getdata())
    encrypted_pixels = [(r + key % 256, g + key % 256, b + key % 256) for (r, g, b) in pixels]
    encrypted_image = Image.new(image.mode, image.size)
    encrypted_image.putdata(encrypted_pixels)

    if not output_path.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):
        output_path += '.png'
    encrypted_image.save(output_path)
    print(f"Encrypted image saved to {output_path}")

def decrypt_image(image_path, output_path, key):
    image = Image.open(image_path)
    pixels = list(image.getdata())
    decrypted_pixels = [(r - key % 256, g - key % 256, b - key % 256) for (r, g, b) in pixels]
    decrypted_image = Image.new(image.mode, image.size)
    decrypted_image.putdata(decrypted_pixels)

    if not output_path.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):
        output_path += '.png'
    decrypted_image.save(output_path)
    print(f"Decrypted image saved to {output_path}")

def main():
    while True:
        choice = input("Would you like to (e)ncrypt or (d)ecrypt an image? (e/d): ").lower()
        if choice in ['e', 'd']:
            image_path = input("Enter the path of the image: ")
            output_path = input("Enter the output path for the processed image: ")
            key = int(input("Enter the encryption/decryption key (an integer): "))
            if choice == 'e':
                encrypt_image(image_path, output_path, key)
            else:
                decrypt_image(image_path, output_path, key)
        else:
            print("Invalid choice. Please enter 'e' for encryption or 'd' for decryption.")
        continue_choice = input("Would you like to process another image? (y/n): ").lower()
        if continue_choice != 'y':
            break

if __name__ == "__main__":
    main()